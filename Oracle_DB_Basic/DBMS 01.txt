데이터베이스 관리 시스템
- 오라클DB, MySQL, DB2, MariaDB...

데이터베이스의 특징
1) 데이터를 저장하는 객체 또는 관계들의 집합
2) 관계를 생성하기 위한 일련의 연산자들의 집합

SQL 문장
- 원하는 결과를 얻어오기 위해 DB에 요청하는 요청문장(Query문)
- sql문장은 대소문자를 구별하지 않는다.
- sql문장의 끝은 세미콜론(;)으로 맺어야 한다.

SQL문장의 종류
1) DML (Data Manipulation Language) : 데이터 조작어
 - select, insert, update, delete를 가지는 문장
2) DDL (Data Definition Language) : 데이터 정의어
 - create, alter, drop등의 키워드를 가지는 문장
3) DCL (Data Control Language) : 데이트 제어어
 - grant, revoke등의 키워드를 가지는 문장

C : Create (생성), Insert
R : Select(Read(읽어오기))
U : Update (수정)
D : Delete (삭제)
----------------------------------------------------------------------------------

1.select문 : 데이터베이스에 저장되어 있는 자원들을 검색할 때 사용하는 문장

select * from employees; (사원테이블로부터 모든 자원을 조회)

예문) 사원테이블에서 사번과 이름, 입사일, 급여를 출력해보자

select employee_id, first_name, hire_date, salary 
from employees;

예제) 사원테이블에서 사번, 이름, 직종, 급여, 보너스, 실제의 보너스 금액을 출력!!
select employee_id, first_name, job_id, salary, commission_pct, 
--*곱하기를 통해 급여와 보너스를 곱한 연산을 수행
salary * commission_pct AS comm
from employees;

--AS comm -> salary * commission_pct은 컬럼명이 길기 때문에 comm으로 별칭(컬럼명)을 정한다.
--AS를 빼도 컬럼명을 변경할 수 있다.(알아서 컬럼명으로 인식한다.)
--컬럼 중에서 컬럼명을 바꾸고 싶은 항목이 있다면, 쉼표를 찍기 전에 변경 컬럼명을 입력해준다.

----------------------------------------------------------------------------------
2. where절(조건부여) 조건(where)절은 from보다 아래에 있다.
예문) 사원테이블에서 급여가 10000이상인 사원들의 정보를 사번, 이름, 급여 순으로 출력

select employee_id, first_name, salary 
from employees
where salary >= 10000;

예문)where절에 문자를 비교하고 싶다면,
where first_name = 'Michael';
-- DB는 "쌍따옴표"를 사용할 수 없다. 무조건 '홑따옴표'를 사용해서 문자, 문자열을 표시한다.
-- 문자를 검색할 때에는 대소문자를 구분한다.
-- (쿼리문 자체는 대소문자를 따지지 않지만 비교하는 컬럼은 대소문자를 구분한다.)

문제) 사원테이블에서 직종이 IT_PROG인 사원들의 정보를 사번, 이름, 직종, 급여 순으로 출력
select employee_id, first_name, job_id, salary 
from employees
where job_id = 'IT_PROG'; 

문제) 사원테이블에서 입사일이 05년9월 21일인 사원의 정보를 
사원, 이름, 입사일 순으로 출력

select employee_id, first_name, hire_date 
from employees
where hire_date = '09/21/2005';

예문) 사원테이블에서 입사일이 05년9월 21일 이후에 입사한 사원의 정보를 
사원, 이름, 입사일 순으로 출력

select employee_id, first_name, hire_date 
from employees
where hire_date >= '09/21/2005'; --해당날짜 이후에 입사한 사람

예문)사원테이블에서 06년도에 입사한 사원들의 정보를 
      사번, 이름, 직종, 입사일 순으로 출력

select employee_id, first_name, job_id, hire_date 
from employees
where hire_date >='01/01/2006' and hire_date <= '12/31/2006';

-- DB에서는 &&, || 가 없고 and, or이 존재한다.(자바의 논술연산자와 비슷하다.) 

문제) 사원테이블에서 급여가 4000~ 8000사이의 사원의 
이름, 직종, 급여를 출력!

select first_name, job_id, salary
from employees
where salary >= 4000 and salary <= 8000;

문제) 사원테이블에서 직종이 SA_MAN 이거나 IT_PROG인 사원들의
모든 정보를 출력

select * from employees
where job_id = 'SA_MAN' or job_id = 'IT_PROG';

문제) 사원테이블에서 급여가 2200, 3200, 5000, 6800를 받는
사원들의 정보를 사번, 이름, 직종, 급여순으로 출력

select employee_id, first_name, job_id, salary 
from employees
where salary = 2200 or salary = 3200 or salary = 5000 or salary = 6800 ;

select employee_id, first_name, job_id, salary 
from employees
where salary = 2200 or salary = 3200 or salary = 5000 or salary = 6800 ;

----------------------------------------------------------------------------------

3. SQL연산자
1) BETWEEN : A와 B사이의 값을 조회할 때 사용(AND를 대신해서 사용)
2) IN : OR을 대신해서 사용하는 연산자
3) LIKE : 유사검색

-- BETWEEN 연산자
예문)사원테이블에서 06년도에 입사한 사원들의 정보를 
      사번, 이름, 직종, 입사일 순으로 출력

select employee_id, first_name, job_id, hire_date 
from employees
--BETWEEN 연산자 사용
where hire_date BETWEEN '01/01/2006' AND '12/31/2006';

--똑같은 컬럼명을 넣을 필요 또 넣을 필요 없다(코드 절약)
where hire_date >='01/01/2006' and hire_date <= '12/31/2006';

문제) 사원테이블에서 급여가 5000이상이고 6000이하인 사원의 정보를
사번, 이름, 급여 순으로 출력

select employee_id, first_name, salary 
from employees
where salary BETWEEN 5000 AND 6000 ;

--IN연산자

예문) 사원테이블에서 직종이 'SA_MAN', IT_PROG인 사원들의 정보를 이름, 직종순으로 출력

select first_name, job_id 
from employees
where job_id IN('SA_MAN', 'IT_PROG');

where job_id = 'SA_MAN' or job_id = 'IT_PROG';

문제) 사원테이블에서 급여가 2200, 3200, 5000, 6800 받는 사원들의 정보를
이름, 직종, 급여순으로 출력하되 IN연산자를 사용하시오

select first_name, job_id, salary 
from employees
where salary IN(2200, 3200, 5000, 6800);

예문) 직종이 'SA_MAN', IT_PROG가 아닌 모든 사원들의 정보를 출력

select *from employees
--NOT IN('SA_MAN', 'IT_PROG') 괄호안에 있는 데이터를 제외한 나머지 데이터 출력!
where job_id NOT IN('SA_MAN', 'IT_PROG');

--LIKE 연산자 (유사검색)
-- % : 모든값
--  _ : 하나의 값
ex) 'M%' : M으로 시작하는 모든 값!
ex) '%a' : a로 끝나는 모든 값!
ex) '%a%' : a가 들어가는 모든 값!
ex) 'M______' : M으로 시작하는 값들 중에 전체길이가 7글자인 모든 값!

예문) 사원테이블에서 사원들의 이름 중 M으로 시작하는 사원의 정보를
사번, 이름, 직종 순으로 출력

select employee_id, first_name, job_id 
from employees
where first_name like 'M%'; 
--이름이 M으로 시작하는 사람 출력!

예문) 사원테이블에서 이름이 d로 끝나는 사원의 사번, 이름, 직종을 출력

select employee_id, first_name, job_id 
from employees
where first_name like '%d';

예문) 사원테이블에서 이름의 어디라도 a가 포함되어 있는 사원의 정보를
이름 직종순으로 출력

select first_name 
from employees
where first_name like '%a%';

예문) 이름의 첫글자가 M이면서 총 7 글자의 이름을 가진 사원의 정보를 
사번, 이름 순으로 검색

select employee_id, first_name 
from employees
where first_name like 'M______';

문제) 사원테이블에서 이름의 세번째 글자에 a가 들어가는 사원들의
사번, 이름 순으로 출력

select employee_id, first_name 
from employees
where first_name like '__a%';

문제) 이름에 소문자 o가 들어가면서 이름이 a로 끝나는 사원들의 정보를
이름, 급여순으로 조회

select first_name, salary 
from employees
where first_name like '%o%a';

문제) 이름이 H로 시작하면서 6글자 이상인 사원들의 정보를
사번, 이름 순으로 조회

select employee_id, first_name 
from employees
where first_name like 'H_____%';

문제) 사원테이블에서 이름에 s자가 포함되어 있지 않은 사원들만
사원, 이름으로 검색

select employee_id, first_name
from employees
where first_name NOT like '%s%';

----------------------------------------------------------------------------------

4. 정렬(ORDER BY)
- 질의 결과에 반환되는 행들을 정렬하고자 할 때 사용하는 문법
- ORDER BY절은 SELECT절의 가장 마지막에 기술
- ASC : 오름차순 (작은 수부터 커지는 것)
- DESC : 내림차순 (큰 수부터 작아지는 것)

예문) 사원테이블에서 급여를 많이 받는 사원순으로 
사번, 이름, 급여, 입사일을 출력하시오
단, 급여가 같을 경우 입사일이 빠른 순으로 정렬!

select employee_id, first_name, salary, hire_date 
from employees
order by salary DESC, hire_date ASC;
--오름차순(ASC)는 생략이 가능하다 기본값이기 때문에..

문제 ) 사원테이블에서 부서번호가 빠른순, 부서번호가 같다면 직종이 빠른순,
직종까지 같다면 급여를 많이 받는 순으로 사번, 이름, 부서번호, 직종, 급여순으로 출력

select employee_id, first_name, department_id, job_id, salary
from employees
order by department_id ASC, job_id ASC, salary DESC; 

